name: 🚀 Deploy to Production

on:
  push:
    branches: [main, master]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 🚀 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🚀 Deploy to Production Server
        run: |
          # Connect to your production server and deploy
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            echo "🚀 Starting production deployment..."
            
            # Navigate to project directory
            cd /opt/whatssuite
            
            # Pull latest changes
            git pull origin main
            
            # Stop existing containers
            docker-compose down
            
            # Pull latest images
            docker-compose pull
            
            # Start production services
            docker-compose up -d --build
            
            # Run database migrations
            docker-compose exec -T api pnpm --filter @whatssuite/db exec prisma migrate deploy
            
            # Health check
            echo "⏳ Waiting for services to be ready..."
            sleep 30
            
            # Check if services are running
            if docker-compose ps | grep -q "Up"; then
              echo "✅ Production deployment successful!"
            else
              echo "❌ Deployment failed!"
              exit 1
            fi
          EOF

      - name: 📊 Deployment Status
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "📱 Services deployed:"
          echo "   • Admin Dashboard: http://${{ secrets.PROD_DOMAIN }}:3002"
          echo "   • Web Client: http://${{ secrets.PROD_DOMAIN }}:3000"
          echo "   • API: http://${{ secrets.PROD_DOMAIN }}:3001"
